---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  KUBECONFORM_SCRIPT: "{{.SCRIPTS_DIR}}/kubeconform.sh"

tasks:

  resources:
    desc: Gather common resources in your cluster, useful when asking for support
    cmds:
      - for: { var: resource }
        cmd: kubectl get {{.ITEM}} {{.CLI_ARGS | default "-A"}}
    vars:
      resource: >-
        nodes
        gitrepositories
        kustomizations
        helmrepositories
        helmreleases
        certificates
        certificaterequests
        ingresses
        pods

  kubeconform:
    desc: Validate Kubernetes manifests with kubeconform
    cmd: bash {{.KUBECONFORM_SCRIPT}} {{.KUBERNETES_DIR}}
    preconditions:
      - msg: Missing kubeconform script
        sh: test -f {{.KUBECONFORM_SCRIPT}}

  apply-ks:
    desc: Apply a Flux Kustomization resource for a cluster
    summary: |-
      CLUSTER: Cluster to run command against (required)
      PATH: Path to the Flux Kustomization resource from the apps base dir (required, e.g. default/plex)
      NS: Namespace the Flux Kustomization exists in (default: flux-system)
    cmd: >
      flux build --namespace {{.NS}} ks {{base .PATH}}
      --kustomization-file {{.CLUSTER_DIR}}/apps/{{.PATH}}/ks.yaml
      --path {{.CLUSTER_DIR}}/apps/{{.PATH}}
      {{- if contains "not found" .KS }}--dry-run \{{ end }}
      | yq 'with(select(.apiVersion == "kustomize.toolkit.fluxcd.io/v1" and .kind == "Kustomization"); .metadata.namespace = "{{.NS}}")' -
      | kubectl apply --server-side --field-manager=kustomize-controller -f -
    requires:
      vars: [CLUSTER, PATH]
    vars:
      NS: '{{.NS | default "flux-system"}}'
      KS:
        sh: flux --namespace {{.NS}} get kustomizations {{base .PATH}} 2>&1
    preconditions:
      - test -f {{.CLUSTER_DIR}}/apps/{{.PATH}}/ks.yaml

  browse-pvc:
    desc: Exec into a container to browse a PersistentVolumeClaim
    summary: |-
      CLUSTER: Cluster to run command against (default: main)
      NS: Namespace to browse PersistentVolumeClaims in (default: default)
      CLAIM: PersistentVolumeClaim to browse (required)
    interactive: true
    cmd: kubectl browse-pvc --namespace {{.NS}} --image docker.io/library/alpine:latest {{.CLAIM}}
    vars:
      NS: '{{.NS | default "default"}}'
    requires:
      vars: [CLUSTER, CLAIM]
    preconditions:
      - kubectl --namespace {{.NS}} get persistentvolumeclaims {{.CLAIM}}

  sync-secrets:
    desc: Sync ExternalSecret resources from provider
    summary: |-
      CLUSTER: Cluster to run command against (default: main)
      NS: Namespace to sync secret in (default: default)
      SECRET: Secret to sync (default: all secrets)
    cmd: >
      {{if eq .SECRET ""}}
      kubectl get externalsecret --all-namespaces --no-headers -A | awk '{print $1, $2}'
      | xargs --max-procs=2 -l bash -c 'kubectl -n $0 annotate externalsecret $1 force-sync=$(date +%s) --overwrite'
      {{else}}
      kubectl --namespace {{.NS}} annotate externalsecret {{.SECRET}} force-sync=$(date +%s) --overwrite
      {{end}}
    vars:
      NS: '{{.NS | default "default"}}'
      SECRET: '{{ .SECRET | default ""}}'
    requires:
      vars: [CLUSTER]
    preconditions:
      - '{{if ne .SECRET ""}}kubectl --namespace {{.NS}} get externalsecret {{.SECRET}}{{end}}'

  .reset:
    internal: true
    cmd: rm -rf {{.KUBERNETES_DIR}}
