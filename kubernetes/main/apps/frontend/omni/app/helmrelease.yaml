apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: omni
  namespace: frontend
spec:
  interval: 30m
  chartRef:
    kind: OCIRepository
    name: app-template
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false

  values:
    # (Optional) defaults for all controllers/pods
    defaultPodOptions: {}

    controllers:
      omni:
        type: deployment
        strategy: Recreate         # avoid two pods overlapping (WireGuard iface/addr clash)
        replicas: 1

        annotations:
          reloader.stakater.com/auto: "true"

        pod:
          hostNetwork: false       # userspace WG does not need host networking
          dnsPolicy: ClusterFirst
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            fsGroup: 0
          terminationGracePeriodSeconds: 5

        initContainers:
          cleanup-wireguard:
            image:
              repository: alpine
              tag: "3.20"
            command:
              - /bin/sh
              - -c
              - |
                set -eux
                apk add --no-cache iproute2 psmisc
                echo "Cleaning up any stale WireGuard/TUN bits..."
                # Remove leftover siderolink interface if present
                ip link show siderolink >/dev/null 2>&1 && ip link delete siderolink || true
                # Kill anything that might be holding the machine API port (rare with Recreate, but cheap)
                fuser -k 8091/tcp 2>/dev/null || true
                fuser -k 8091/udp 2>/dev/null || true
                echo "Cleanup complete."
            securityContext:
              privileged: true
              capabilities:
                add: ["NET_ADMIN"]

        containers:
          app:
            image:
              repository: ghcr.io/siderolabs/omni
              tag: v1.1.3
              pullPolicy: IfNotPresent

            # Load your secrets as you already do (OMNI_* vars, SAML, advertised URL, etc.)
            envFrom:
              - secretRef:
                  name: omni-secret

            # Bind inside the pod; Ingress still fronts 443 externally
            args:
              - --name=$(OMNI_NAME)
              - --account-id=$(OMNI_ACCOUNT_UUID)
              - --initial-users=$(OMNI_ADMIN_EMAILS)
              - --etcd-embedded=true
              - --etcd-embedded-unsafe-fsync=true
              - --private-key-source=file:///omni.asc
              - --bind-addr=0.0.0.0:8080
              - --k8s-proxy-bind-addr=0.0.0.0:8100
              - --machine-api-bind-addr=0.0.0.0:8091
              - --advertised-api-url=$(ADVERTISED_API_URL)
              - --advertised-kubernetes-proxy-url=$(ADVERTISED_K8S_PROXY_URL)
              - --machine-api-advertised-url=$(SIDEROLINK_API_ADVERTISED_URL)
              - --auth-saml-enabled=$(AUTH_SAML_ENABLED)
              - --auth-saml-url=$(AUTH_SAML_METADATA_URL)

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              capabilities:
                add: ["NET_ADMIN","NET_RAW"]

            # Request the TUN device via Talos device plugin so the cgroup allowlist is correct
            resources:
              requests:
                cpu: 10m
                memory: 500Mi
                "devices.kube.talos.dev/tun": "1"
              limits:
                memory: 16Gi
                "devices.kube.talos.dev/tun": "1"

            ports:
              - name: http
                containerPort: 8080
              - name: machine
                containerPort: 8091
              - name: kube
                containerPort: 8100

            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/health
                    port: 8080
                  initialDelaySeconds: 60
                  periodSeconds: 30
                  timeoutSeconds: 10
                  failureThreshold: 3
              readiness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/health
                    port: 8080
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  timeoutSeconds: 5
                  failureThreshold: 3

    service:
      omni:
        controller: omni
        type: ClusterIP
        ports:
          http:
            port: 8080
            targetPort: http
          machine:
            port: 8091          # Service targets new internal port name
            targetPort: machine
          kube:
            port: 8100
            targetPort: kube

    persistence:
      etcd:
        existingClaim: omni
        globalMounts:
          - path: /_out/etcd

      # Expose /dev/net/tun inside the container
      dev-net-tun:
        type: hostPath
        hostPath: /dev/net/tun
        hostPathType: CharDevice
        globalMounts:
          - path: /dev/net/tun

      deploy-key:
        type: secret
        name: omni-secret
        defaultMode: 256
        globalMounts:
          - path: /omni.asc
            subPath: OMNI_ASC
